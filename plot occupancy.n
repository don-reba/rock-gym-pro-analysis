// REFERENCE: Newtonsoft.Json.dll

using Nemerle.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Console;
using System.IO;

enum Status
{
| NA
| Full
| Open
}

def timezone = TimeZoneInfo.FindSystemTimeZoneById("Pacific Standard Time");

def ParseJsonTime(str)
{
	def time = DateTime.ParseExact(str, "yyyy-MM-dd HH:mm", Globalization.CultureInfo.InvariantCulture);
	DateTimeOffset(time, timezone.GetUtcOffset(time));
}

def begin = ParseJsonTime("2021-03-11 19:00");
def end   = ParseJsonTime("2021-03-18 19:00");

def SlotIndex(t)
{
	def m = (t - begin).TotalMinutes :> int;
	m / 60
}
def n = SlotIndex(end);

WriteLine("Reading data...");

def data = @"analysis\combined.json" |> File.ReadAllText |> JObject.Parse;

WriteLine("Assembling timelines...");

foreach ((Key = slot, Value = samples) in data)
{
	when (ParseJsonTime(slot) >= ParseJsonTime("2021-03-18 19:00"))
	{
		def timeline = array(n);
		foreach (sample in samples)
		{
			def i = SlotIndex(ParseJsonTime(sample[0] :> string));
			when (i < n)
			{
				match (sample[1] :> string)
				{
				| "open" => timeline[i] = Status.Open
				| "full" when timeline[i] == Status.NA => timeline[i] = Status.Full
				| _ => ()
				}
			}
		}

		Write("{0} ", slot);
		foreach (status in timeline)
		{
			match (status)
			{
			| NA => Write(' ')
			| Full => Write('_')
			| Open => Write('x')
			}
		}
		WriteLine();
	}
}
